// This file was generated by counterfeiter
package commitsfakes

import (
	"sync"
	"time"

	"github.com/calebamiles/github-client/comments"
	"github.com/calebamiles/github-client/commits"
)

type FakeCommit struct {
	AuthorStub        func() commits.Author
	authorMutex       sync.RWMutex
	authorArgsForCall []struct{}
	authorReturns     struct {
		result1 commits.Author
	}
	DateStub        func() time.Time
	dateMutex       sync.RWMutex
	dateArgsForCall []struct{}
	dateReturns     struct {
		result1 time.Time
	}
	SHAStub        func() string
	sHAMutex       sync.RWMutex
	sHAArgsForCall []struct{}
	sHAReturns     struct {
		result1 string
	}
	ParentSHAsStub        func() []string
	parentSHAsMutex       sync.RWMutex
	parentSHAsArgsForCall []struct{}
	parentSHAsReturns     struct {
		result1 []string
	}
	CommentsURLStub        func() string
	commentsURLMutex       sync.RWMutex
	commentsURLArgsForCall []struct{}
	commentsURLReturns     struct {
		result1 string
	}
	StringStub        func() string
	stringMutex       sync.RWMutex
	stringArgsForCall []struct{}
	stringReturns     struct {
		result1 string
	}
	CommentsStub        func() []comments.Comment
	commentsMutex       sync.RWMutex
	commentsArgsForCall []struct{}
	commentsReturns     struct {
		result1 []comments.Comment
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommit) Author() commits.Author {
	fake.authorMutex.Lock()
	fake.authorArgsForCall = append(fake.authorArgsForCall, struct{}{})
	fake.recordInvocation("Author", []interface{}{})
	fake.authorMutex.Unlock()
	if fake.AuthorStub != nil {
		return fake.AuthorStub()
	} else {
		return fake.authorReturns.result1
	}
}

func (fake *FakeCommit) AuthorCallCount() int {
	fake.authorMutex.RLock()
	defer fake.authorMutex.RUnlock()
	return len(fake.authorArgsForCall)
}

func (fake *FakeCommit) AuthorReturns(result1 commits.Author) {
	fake.AuthorStub = nil
	fake.authorReturns = struct {
		result1 commits.Author
	}{result1}
}

func (fake *FakeCommit) Date() time.Time {
	fake.dateMutex.Lock()
	fake.dateArgsForCall = append(fake.dateArgsForCall, struct{}{})
	fake.recordInvocation("Date", []interface{}{})
	fake.dateMutex.Unlock()
	if fake.DateStub != nil {
		return fake.DateStub()
	} else {
		return fake.dateReturns.result1
	}
}

func (fake *FakeCommit) DateCallCount() int {
	fake.dateMutex.RLock()
	defer fake.dateMutex.RUnlock()
	return len(fake.dateArgsForCall)
}

func (fake *FakeCommit) DateReturns(result1 time.Time) {
	fake.DateStub = nil
	fake.dateReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeCommit) SHA() string {
	fake.sHAMutex.Lock()
	fake.sHAArgsForCall = append(fake.sHAArgsForCall, struct{}{})
	fake.recordInvocation("SHA", []interface{}{})
	fake.sHAMutex.Unlock()
	if fake.SHAStub != nil {
		return fake.SHAStub()
	} else {
		return fake.sHAReturns.result1
	}
}

func (fake *FakeCommit) SHACallCount() int {
	fake.sHAMutex.RLock()
	defer fake.sHAMutex.RUnlock()
	return len(fake.sHAArgsForCall)
}

func (fake *FakeCommit) SHAReturns(result1 string) {
	fake.SHAStub = nil
	fake.sHAReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCommit) ParentSHAs() []string {
	fake.parentSHAsMutex.Lock()
	fake.parentSHAsArgsForCall = append(fake.parentSHAsArgsForCall, struct{}{})
	fake.recordInvocation("ParentSHAs", []interface{}{})
	fake.parentSHAsMutex.Unlock()
	if fake.ParentSHAsStub != nil {
		return fake.ParentSHAsStub()
	} else {
		return fake.parentSHAsReturns.result1
	}
}

func (fake *FakeCommit) ParentSHAsCallCount() int {
	fake.parentSHAsMutex.RLock()
	defer fake.parentSHAsMutex.RUnlock()
	return len(fake.parentSHAsArgsForCall)
}

func (fake *FakeCommit) ParentSHAsReturns(result1 []string) {
	fake.ParentSHAsStub = nil
	fake.parentSHAsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeCommit) CommentsURL() string {
	fake.commentsURLMutex.Lock()
	fake.commentsURLArgsForCall = append(fake.commentsURLArgsForCall, struct{}{})
	fake.recordInvocation("CommentsURL", []interface{}{})
	fake.commentsURLMutex.Unlock()
	if fake.CommentsURLStub != nil {
		return fake.CommentsURLStub()
	} else {
		return fake.commentsURLReturns.result1
	}
}

func (fake *FakeCommit) CommentsURLCallCount() int {
	fake.commentsURLMutex.RLock()
	defer fake.commentsURLMutex.RUnlock()
	return len(fake.commentsURLArgsForCall)
}

func (fake *FakeCommit) CommentsURLReturns(result1 string) {
	fake.CommentsURLStub = nil
	fake.commentsURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCommit) String() string {
	fake.stringMutex.Lock()
	fake.stringArgsForCall = append(fake.stringArgsForCall, struct{}{})
	fake.recordInvocation("String", []interface{}{})
	fake.stringMutex.Unlock()
	if fake.StringStub != nil {
		return fake.StringStub()
	} else {
		return fake.stringReturns.result1
	}
}

func (fake *FakeCommit) StringCallCount() int {
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return len(fake.stringArgsForCall)
}

func (fake *FakeCommit) StringReturns(result1 string) {
	fake.StringStub = nil
	fake.stringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCommit) Comments() []comments.Comment {
	fake.commentsMutex.Lock()
	fake.commentsArgsForCall = append(fake.commentsArgsForCall, struct{}{})
	fake.recordInvocation("Comments", []interface{}{})
	fake.commentsMutex.Unlock()
	if fake.CommentsStub != nil {
		return fake.CommentsStub()
	} else {
		return fake.commentsReturns.result1
	}
}

func (fake *FakeCommit) CommentsCallCount() int {
	fake.commentsMutex.RLock()
	defer fake.commentsMutex.RUnlock()
	return len(fake.commentsArgsForCall)
}

func (fake *FakeCommit) CommentsReturns(result1 []comments.Comment) {
	fake.CommentsStub = nil
	fake.commentsReturns = struct {
		result1 []comments.Comment
	}{result1}
}

func (fake *FakeCommit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorMutex.RLock()
	defer fake.authorMutex.RUnlock()
	fake.dateMutex.RLock()
	defer fake.dateMutex.RUnlock()
	fake.sHAMutex.RLock()
	defer fake.sHAMutex.RUnlock()
	fake.parentSHAsMutex.RLock()
	defer fake.parentSHAsMutex.RUnlock()
	fake.commentsURLMutex.RLock()
	defer fake.commentsURLMutex.RUnlock()
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	fake.commentsMutex.RLock()
	defer fake.commentsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCommit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commits.Commit = new(FakeCommit)
