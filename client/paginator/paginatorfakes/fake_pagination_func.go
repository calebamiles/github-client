// This file was generated by counterfeiter
package paginatorfakes

import (
	"net/http"
	"sync"

	"github.com/calebamiles/github-client/client/paginator"
)

type FakePaginationFunc struct {
	Stub        func(*http.Response) (currentPage []byte, nextPageURL string, dontShadowThis error)
	mutex       sync.RWMutex
	argsForCall []struct {
		arg1 *http.Response
	}
	returns struct {
		result1 []byte
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePaginationFunc) Spy(arg1 *http.Response) (currentPage []byte, nextPageURL string, dontShadowThis error) {
	fake.mutex.Lock()
	fake.argsForCall = append(fake.argsForCall, struct {
		arg1 *http.Response
	}{arg1})
	fake.recordInvocation("PaginationFunc", []interface{}{arg1})
	fake.mutex.Unlock()
	if fake.Stub != nil {
		return fake.Stub(arg1)
	} else {
		return fake.returns.result1, fake.returns.result2, fake.returns.result3
	}
}

func (fake *FakePaginationFunc) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakePaginationFunc) ArgsForCall(i int) *http.Response {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].arg1
}

func (fake *FakePaginationFunc) Returns(result1 []byte, result2 string, result3 error) {
	fake.Stub = nil
	fake.returns = struct {
		result1 []byte
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePaginationFunc) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.invocations
}

func (fake *FakePaginationFunc) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ paginator.PaginationFunc = new(FakePaginationFunc).Spy
