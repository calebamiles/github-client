// This file was generated by counterfeiter
package filefakes

import (
	"sync"

	"github.com/calebamiles/github-client/prs/file"
)

type FakeChange struct {
	FileSHAStub        func() string
	fileSHAMutex       sync.RWMutex
	fileSHAArgsForCall []struct{}
	fileSHAReturns     struct {
		result1 string
	}
	FilenameStub        func() string
	filenameMutex       sync.RWMutex
	filenameArgsForCall []struct{}
	filenameReturns     struct {
		result1 string
	}
	NumDeletionsStub        func() int
	numDeletionsMutex       sync.RWMutex
	numDeletionsArgsForCall []struct{}
	numDeletionsReturns     struct {
		result1 int
	}
	NumAdditionsStub        func() int
	numAdditionsMutex       sync.RWMutex
	numAdditionsArgsForCall []struct{}
	numAdditionsReturns     struct {
		result1 int
	}
	NumChangesStub        func() int
	numChangesMutex       sync.RWMutex
	numChangesArgsForCall []struct{}
	numChangesReturns     struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChange) FileSHA() string {
	fake.fileSHAMutex.Lock()
	fake.fileSHAArgsForCall = append(fake.fileSHAArgsForCall, struct{}{})
	fake.recordInvocation("FileSHA", []interface{}{})
	fake.fileSHAMutex.Unlock()
	if fake.FileSHAStub != nil {
		return fake.FileSHAStub()
	} else {
		return fake.fileSHAReturns.result1
	}
}

func (fake *FakeChange) FileSHACallCount() int {
	fake.fileSHAMutex.RLock()
	defer fake.fileSHAMutex.RUnlock()
	return len(fake.fileSHAArgsForCall)
}

func (fake *FakeChange) FileSHAReturns(result1 string) {
	fake.FileSHAStub = nil
	fake.fileSHAReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeChange) Filename() string {
	fake.filenameMutex.Lock()
	fake.filenameArgsForCall = append(fake.filenameArgsForCall, struct{}{})
	fake.recordInvocation("Filename", []interface{}{})
	fake.filenameMutex.Unlock()
	if fake.FilenameStub != nil {
		return fake.FilenameStub()
	} else {
		return fake.filenameReturns.result1
	}
}

func (fake *FakeChange) FilenameCallCount() int {
	fake.filenameMutex.RLock()
	defer fake.filenameMutex.RUnlock()
	return len(fake.filenameArgsForCall)
}

func (fake *FakeChange) FilenameReturns(result1 string) {
	fake.FilenameStub = nil
	fake.filenameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeChange) NumDeletions() int {
	fake.numDeletionsMutex.Lock()
	fake.numDeletionsArgsForCall = append(fake.numDeletionsArgsForCall, struct{}{})
	fake.recordInvocation("NumDeletions", []interface{}{})
	fake.numDeletionsMutex.Unlock()
	if fake.NumDeletionsStub != nil {
		return fake.NumDeletionsStub()
	} else {
		return fake.numDeletionsReturns.result1
	}
}

func (fake *FakeChange) NumDeletionsCallCount() int {
	fake.numDeletionsMutex.RLock()
	defer fake.numDeletionsMutex.RUnlock()
	return len(fake.numDeletionsArgsForCall)
}

func (fake *FakeChange) NumDeletionsReturns(result1 int) {
	fake.NumDeletionsStub = nil
	fake.numDeletionsReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeChange) NumAdditions() int {
	fake.numAdditionsMutex.Lock()
	fake.numAdditionsArgsForCall = append(fake.numAdditionsArgsForCall, struct{}{})
	fake.recordInvocation("NumAdditions", []interface{}{})
	fake.numAdditionsMutex.Unlock()
	if fake.NumAdditionsStub != nil {
		return fake.NumAdditionsStub()
	} else {
		return fake.numAdditionsReturns.result1
	}
}

func (fake *FakeChange) NumAdditionsCallCount() int {
	fake.numAdditionsMutex.RLock()
	defer fake.numAdditionsMutex.RUnlock()
	return len(fake.numAdditionsArgsForCall)
}

func (fake *FakeChange) NumAdditionsReturns(result1 int) {
	fake.NumAdditionsStub = nil
	fake.numAdditionsReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeChange) NumChanges() int {
	fake.numChangesMutex.Lock()
	fake.numChangesArgsForCall = append(fake.numChangesArgsForCall, struct{}{})
	fake.recordInvocation("NumChanges", []interface{}{})
	fake.numChangesMutex.Unlock()
	if fake.NumChangesStub != nil {
		return fake.NumChangesStub()
	} else {
		return fake.numChangesReturns.result1
	}
}

func (fake *FakeChange) NumChangesCallCount() int {
	fake.numChangesMutex.RLock()
	defer fake.numChangesMutex.RUnlock()
	return len(fake.numChangesArgsForCall)
}

func (fake *FakeChange) NumChangesReturns(result1 int) {
	fake.NumChangesStub = nil
	fake.numChangesReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeChange) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileSHAMutex.RLock()
	defer fake.fileSHAMutex.RUnlock()
	fake.filenameMutex.RLock()
	defer fake.filenameMutex.RUnlock()
	fake.numDeletionsMutex.RLock()
	defer fake.numDeletionsMutex.RUnlock()
	fake.numAdditionsMutex.RLock()
	defer fake.numAdditionsMutex.RUnlock()
	fake.numChangesMutex.RLock()
	defer fake.numChangesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeChange) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Change = new(FakeChange)
